package nachos.threads;

import nachos.machine.*;

import java.util.TreeSet;
import java.util.HashSet;
import java.util.Iterator;

//import PriorityScheduler.PriorityQueue;
//import PriorityScheduler.ThreadState;

/**
 * A scheduler that chooses threads using a lottery.
 *
 * <p>
 * A lottery scheduler associates a number of tickets with each thread. When a
 * thread needs to be dequeued, a random lottery is held, among all the tickets
 * of all the threads waiting to be dequeued. The thread that holds the winning
 * ticket is chosen.
 *
 * <p>
 * Note that a lottery scheduler must be able to handle a lot of tickets
 * (sometimes billions), so it is not acceptable to maintain state for every
 * ticket.
 *
 * <p>
 * A lottery scheduler must partially solve the priority inversion problem; in
 * particular, tickets must be transferred through locks, and through joins.
 * Unlike a priority scheduler, these tickets add (as opposed to just taking
 * the maximum).
 */
/*-------------Isaac Flores------------------*/
public class LotteryScheduler extends PriorityScheduler {
    /**
     * Allocate a new lottery scheduler.
     */
    public LotteryScheduler() {
    }
    
    /**
     * Allocate a new lottery thread queue.
     *
     * @param	transferPriority	<tt>true</tt> if this queue should
     *					transfer tickets from waiting threads
     *					to the owning thread.
     * @return	a new lottery thread queue.
     */
    /*public ThreadQueue newThreadQueue(boolean transferPriority) {
    	return new PriorityQueue(transferPriority); //same as priority scheduler
    }*/
    /**
     * The default priority for a new thread. Do not change this value.
     */
    public static final int priorityDefault = 1;
    /**
     * The minimum priority that a thread can have. Do not change this value.
     */
    public static final int priorityMinimum = 1;
    /**
     * The maximum priority that a thread can have. Do not change this value.
     */
    public static final int priorityMaximum = Integer.MAX_VALUE;
    
    protected static int totalTickets;
    
    protected ThreadState pickNextThread() {
    	totalTickets = 0;
    	for(KThread current : waitQueue){
    		totalTickets += getEffectivePriority(current);//this is really inefficient
    	}
	    // implement me
		/*-------------Andrew-------------*/
	    /*-------------Isaac--------------*/
			KThread nextThread;
			int winner = Machine.timer.getTime()%totalTickets;
			//winning "ticket" must be less than the total tickets in the system
			
				for (KThread thread : waitQueue){//increment by each thread through waitQueue
					if (nextThread == null|| getEffectivePriority(thread) < winner) {
						//Finding the thread with the highest priority to set to nextThread
							nextThread = thread;
						//subtract this thread's tickets from winner. this guarantees a winner
							winner -= getEffectivePriority(thread);
					}
				
					else{
						totalTickets -= getEffectivePriority(Thread);
						return getThreadState(Thread);
					}
			//return null was taken out, we need to return the next thread we picked
		/*-------------Andrew-------------*/
	    /*-------------Isaac--------------*/
				}
				return null;//we should get here iff waitQueue is empty
	}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
